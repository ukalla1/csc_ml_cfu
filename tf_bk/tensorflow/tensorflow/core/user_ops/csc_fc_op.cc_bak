#include "tensorflow/core/user_ops/csc_fc_op.h"
#include "tensorflow/core/framework/op_kernel.h"
#include "third_party/eigen3/unsupported/Eigen/CXX11/Tensor"
#include <iostream>

using namespace tensorflow;

// Helper function to perform the custom CSC_FC operation
template <typename T>
void CscFcKernel(const Tensor& input_tensor, const Tensor& kernel_tensor, const Tensor& bias_tensor,
                 const int csc_c, const int csc_n, const int csc_f, const int csc_s, Tensor* output_tensor) {

  std::cout << "CscFcKernel called" << std::endl;

  auto i_ = input_tensor.tensor<T, 2>();
  auto k_ = kernel_tensor.tensor<T, 2>();
  auto b_ = bias_tensor.tensor<T, 1>();
  auto o_ = output_tensor->tensor<T, 2>();

  int batch_size = input_tensor.dim_size(0);
  int input_size = input_tensor.dim_size(1);
  int output_size = kernel_tensor.dim_size(1);

  for (int b = 0; b < batch_size; ++b) {
    int st = 0;
    for (int o = 0; o < output_size; ++o) {
      int st_idx = (o + input_size) % input_size;
      T p = b_(o); // Initialize with bias value
      for (int i = 0; i < csc_f; ++i) {
        int new_i = (st_idx + i) % input_size;
        p += i_(b, new_i) * k_(o, new_i);
      }
      o_(b, o) = p;
    }
  }
}

// Implement the custom CSC_FC op
class CscFcOp : public OpKernel {
 public:
  explicit CscFcOp(OpKernelConstruction* context) : OpKernel(context) {}

  void Compute(OpKernelContext* context) override {

    std::cout << "CscFcOp::Compute called" << std::endl;

    // Get the input tensors
    const Tensor& input_tensor = context->input(0);
    const Tensor& kernel_tensor = context->input(1);
    const Tensor& bias_tensor = context->input(2);

    // Get the additional inputs
    int csc_c = context->input(3).scalar<int>()();
    int csc_n = context->input(4).scalar<int>()();
    int csc_f = context->input(5).scalar<int>()();
    int csc_s = context->input(6).scalar<int>()();

    // Calculate the output shape
    TensorShape output_shape = input_tensor.shape();
    output_shape.set_dim(1, kernel_tensor.dim_size(1));

    // Create an output tensor
    Tensor* output_tensor = nullptr;
    OP_REQUIRES_OK(context, context->allocate_output(0, output_shape, &output_tensor));

    // Call the helper function to perform the custom CSC_FC operation
    CscFcKernel<float>(input_tensor, kernel_tensor, bias_tensor, csc_c, csc_n, csc_f, csc_s, output_tensor);

    std::cout << "CSC_FC_OP_CC included and kernel registered" << std::endl;
  }
};

// Register the custom CSC_FC op
REGISTER_KERNEL_BUILDER(Name("CscFc").Device(DEVICE_CPU), CscFcOp);
